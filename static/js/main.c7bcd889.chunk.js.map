{"version":3,"sources":["reportWebVitals.js","context.js","reducer.js","App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ThemeContext","React","createContext","themeReducer","state","action","type","Copyright","Typography","variant","color","align","Link","href","Date","getFullYear","useStyles","makeStyles","theme","root","display","flexDirection","minHeight","appBar","borderBottom","palette","divider","toolbar","flexWrap","toolbarTitle","flexGrow","heroContent","padding","spacing","footer","marginTop","backgroundColor","grey","toggle","paddingTop","App","useContext","isDark","dispatch","useState","text","setText","icon","setIcon","classes","className","CssBaseline","AppBar","position","elevation","Toolbar","noWrap","Container","maxWidth","component","gutterBottom","Grid","container","direction","justify","alignItems","Button","size","button","startIcon","onClick","dark","light","Index","useReducer","StrictMode","Provider","value","ThemeProvider","createMuiTheme","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c7bcd889.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\n\nconst ThemeContext = React.createContext();\n\nexport { ThemeContext as default };\n","const themeReducer = (state, action) => {\n  switch (action.type) {\n    case 'DARK':\n      return true;\n    case 'LIGHT':\n      return false;\n    default:\n      return state;\n  }\n};\n\nexport { themeReducer as default };\n","import { useState, useContext } from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\nimport Brightness2Icon from '@material-ui/icons/Brightness2';\nimport Brightness5Icon from '@material-ui/icons/Brightness5';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Grid from '@material-ui/core/Grid';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Link from '@material-ui/core/Link';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport ThemeContext from './context';\n\nconst Copyright = () => {\n  return (\n    <Typography variant='body2' color='textSecondary' align='center'>\n      {'Created by '}\n      <Link color='inherit' href='https://github.com/mdmundo'>\n        Edmundo Paulino\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    minHeight: '100vh'\n  },\n  appBar: {\n    borderBottom: `1px solid ${theme.palette.divider}`\n  },\n  toolbar: {\n    flexWrap: 'wrap'\n  },\n  toolbarTitle: {\n    flexGrow: 1\n  },\n  heroContent: {\n    padding: theme.spacing(8, 1, 6)\n  },\n  footer: {\n    padding: theme.spacing(3, 2),\n    marginTop: 'auto',\n    backgroundColor:\n      theme.palette.type === 'light'\n        ? theme.palette.grey[200]\n        : theme.palette.grey[800]\n  },\n  toggle: {\n    paddingTop: theme.spacing(3)\n  }\n}));\n\nconst App = () => {\n  const { isDark, dispatch } = useContext(ThemeContext);\n\n  const [text, setText] = useState('Dark Theme');\n  const [icon, setIcon] = useState(<Brightness2Icon />);\n\n  const setTheme = () => {\n    if (isDark) {\n      dispatch({ type: 'LIGHT' });\n      setText('Dark Theme');\n      setIcon(<Brightness2Icon />);\n    } else {\n      dispatch({ type: 'DARK' });\n      setText('Light Theme');\n      setIcon(<Brightness5Icon />);\n    }\n  };\n\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar\n        position='static'\n        color='default'\n        elevation={0}\n        className={classes.appBar}>\n        <Toolbar className={classes.toolbar}>\n          <Typography\n            variant='h6'\n            color='inherit'\n            noWrap\n            className={classes.toolbarTitle}>\n            The Dark Theme\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      {/* Hero unit */}\n      <Container maxWidth='xs' component='main' className={classes.heroContent}>\n        <Typography\n          component='h1'\n          variant='h2'\n          align='center'\n          color='textPrimary'\n          gutterBottom>\n          About\n        </Typography>\n        <Typography\n          variant='h5'\n          align='center'\n          color='textSecondary'\n          component='p'>\n          Although the specific hues and colors vary, dark mode is the color\n          scheme of any interface that displays bright text and interface\n          elements atop a darker background.\n        </Typography>\n        <Grid\n          container\n          direction='column'\n          justify='center'\n          alignItems='center'\n          className={classes.toggle}>\n          <Button\n            variant='contained'\n            color='primary'\n            size='large'\n            className={classes.button}\n            startIcon={icon}\n            onClick={setTheme}>\n            {text}\n          </Button>\n        </Grid>\n      </Container>\n      {/* End hero unit */}\n      {/* Footer */}\n      <footer className={classes.footer}>\n        <Container maxWidth='xs'>\n          <Copyright />\n        </Container>\n      </footer>\n      {/* End footer */}\n    </div>\n  );\n};\n\nexport default App;\n","import React, { useReducer } from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport reportWebVitals from './reportWebVitals';\nimport ThemeContext from './context';\nimport themeReducer from './reducer';\nimport App from './App';\n\nconst dark = {\n  palette: {\n    type: 'dark'\n  }\n};\n\nconst light = {\n  palette: {\n    type: 'light'\n  }\n};\n\nconst Index = () => {\n  const [isDark, dispatch] = useReducer(themeReducer, false);\n\n  return (\n    <React.StrictMode>\n      <ThemeContext.Provider value={{ isDark, dispatch }}>\n        <ThemeProvider theme={createMuiTheme(isDark ? dark : light)}>\n          <App />\n        </ThemeProvider>\n      </ThemeContext.Provider>\n    </React.StrictMode>\n  );\n};\n\nReactDOM.render(<Index />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}